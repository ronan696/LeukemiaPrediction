/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import preprocessing.*;
import classifiers.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
/**
 *
 * @author Hp
 */
public class Dashboard extends javax.swing.JFrame {

    /**
     * Creates new form DashBoard
     */
    public Dashboard() {
        initComponents();
        Border border = BorderFactory.createLineBorder(Color.BLACK, 1);
        imageContainer.setBorder(border);
   }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        cellTable = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        browseImageRF = new javax.swing.JButton();
        performRFClassification = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        numTrees = new javax.swing.JSpinner();
        numAttributes = new javax.swing.JSpinner();
        trainRFClassifier = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        rfImagePath = new javax.swing.JTextField();
        rfOutputFile = new javax.swing.JButton();
        imageContainer = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newFeatureFile = new javax.swing.JMenuItem();
        performAnalysis = new javax.swing.JMenuItem();
        settings = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitSystem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cellTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cell (Binary)", "Cell (Grayscale)", "Condition"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cellTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cellTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(cellTable);
        if (cellTable.getColumnModel().getColumnCount() > 0) {
            cellTable.getColumnModel().getColumn(0).setResizable(false);
            cellTable.getColumnModel().getColumn(1).setResizable(false);
            cellTable.getColumnModel().getColumn(2).setResizable(false);
        }

        browseImageRF.setText("Browse Image");
        browseImageRF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseImageRFActionPerformed(evt);
            }
        });

        performRFClassification.setText("Classify");
        performRFClassification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performRFClassificationActionPerformed(evt);
            }
        });

        jLabel1.setText("Number of Trees");

        jLabel2.setText("Number of Attributes");

        jLabel3.setText("Output File Path");

        numTrees.setModel(new javax.swing.SpinnerNumberModel(1, 1, 501, 1));
        numTrees.setVerifyInputWhenFocusTarget(false);

        numAttributes.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));

        trainRFClassifier.setText("Train Classifier");
        trainRFClassifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainRFClassifierActionPerformed(evt);
            }
        });

        rfOutputFile.setText("Browse");
        rfOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rfOutputFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numAttributes, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numTrees, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rfOutputFile))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(browseImageRF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2)
                    .addComponent(trainRFClassifier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(performRFClassification, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numTrees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numAttributes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rfOutputFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trainRFClassifier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseImageRF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(performRFClassification)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Random Forest", jPanel1);

        imageContainer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageContainer.setText("Image Not Loaded");

        jMenu1.setText("File");

        newFeatureFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFeatureFile.setText("New Feature File");
        newFeatureFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFeatureFileActionPerformed(evt);
            }
        });
        jMenu1.add(newFeatureFile);

        performAnalysis.setText("Analysis");
        performAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performAnalysisActionPerformed(evt);
            }
        });
        jMenu1.add(performAnalysis);

        settings.setText("Settings");
        settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsActionPerformed(evt);
            }
        });
        jMenu1.add(settings);
        jMenu1.add(jSeparator1);

        exitSystem.setText("Exit");
        exitSystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitSystemActionPerformed(evt);
            }
        });
        jMenu1.add(exitSystem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(imageContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(imageContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void performAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performAnalysisActionPerformed
 
    }//GEN-LAST:event_performAnalysisActionPerformed

    private void performRFClassificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performRFClassificationActionPerformed
            //List<String> records = new ArrayList<>();
            try {
                Initialization.src = ImageIO.read(new File(rfImagePath.getText()));
                DefaultTableModel dtm = (DefaultTableModel) cellTable.getModel();
                dtm.getDataVector().removeAllElements();
                dtm.fireTableDataChanged();
//                while(dtm.getRowCount() > 0)
//                    dtm.removeRow(0);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            ProgressMonitor ceProgressMonitor = new ProgressMonitor(this,"Preprocessing Image","",0,100);
            ceProgressMonitor.setMillisToPopup(500);
            SwingWorker cellExtractor = new SwingWorker<Integer,Integer> ()    {
                @Override
                protected Integer doInBackground() throws Exception {
                    ceProgressMonitor.setNote("Performing Grayscale Conversion");
                    new Grayscale().convert();
                    publish(12);
                    ceProgressMonitor.setNote("Performing Histogram Equalization");
                    new HistogramEqualization().performHistEqualization();
                    publish(25);
                    ceProgressMonitor.setNote("Performing Contrast Stretching");
                    new ContrastStretching().performcs();
                    publish(37);
                    ceProgressMonitor.setNote("Performing Image Arithmetic");
                    new ImageArithmetic().compute();
                    publish(50);
                    ceProgressMonitor.setNote("Performing Median Filtering");
                    new MedianFilter().performmf();
                    publish(63);
                    ceProgressMonitor.setNote("Converting to Binary Image");
                    new KMeans().init();
                    publish(75);
                    ceProgressMonitor.setNote("Performing Opening");
                    new Opening().open();
                    publish(80);
                    ceProgressMonitor.setNote("Extracting Components");
                    Initialization.numComponents = new SAGAP().perform();
                    for(int i=1;i<=Initialization.numComponents;i++)   {
                        FeatureExtraction fe = new FeatureExtraction();
                        fe.computeFeatures("Components\\Component"+i+".png","Components\\GComponent"+i+".png");
                        fe.computePerimeter("Components\\Component"+i+".png");
                        String record = fe.getArea() + ","
                            + fe.getPerimeter() + "," + fe.getFormFactor() + "," + fe.getStd() + "," 
                            + fe.getVar() + "," + fe.getEnergy() + "," + fe.getEntropy() + ","
                            + "test";
                        //records.add(record);
                    }
                    return 100; 
                }
                
                @Override
                protected void process(List<Integer> chunks)    {
                    int val = chunks.get(chunks.size()-1);
                    ceProgressMonitor.setProgress(val);
                }

                @Override
                protected void done()   {
                    ceProgressMonitor.close();
                    populateTable();
                }
                
            };
            cellExtractor.execute();
    }//GEN-LAST:event_performRFClassificationActionPerformed
    
    private void populateTable()    {
        String [] columns = {"Cell (Binary)", "Cell (Grayscale)", "Condition"};
        Object [][] data   = new Object [Initialization.numComponents][3];
        for(int i=1;i<=Initialization.numComponents;i++) {
            try {
                data[i-1][0] = new ImageIcon(ImageIO.read(new File("Components\\Component" + i + ".png")));
                data[i-1][1] = new ImageIcon(ImageIO.read(new File("Components\\GComponent" + i + ".png")));
                data[i-1][2] = "Cell " + i;   
            } catch (IOException ex) {
                ex.printStackTrace();
            } 
        }
        DefaultTableModel model = new DefaultTableModel(data,columns)
        {
            //  Returning the Class of each column will allow different
            //  renderers to be used based on Class
            @Override
            public Class getColumnClass(int column) {
                return getValueAt(0, column).getClass();
            }
            
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }   
        };
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( SwingConstants.CENTER );
        centerRenderer.setVerticalAlignment( SwingConstants.CENTER );
        cellTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        cellTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        cellTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        cellTable.setShowGrid(true);
        cellTable.setModel(model);
        
        for(int i=1;i<=Initialization.numComponents;i++)  {
            cellTable.setRowHeight(i-1,((Icon) data[i-1][0]).getIconHeight() + 10);
        }
    }
    
    private void settingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsActionPerformed
        SettingsPanel sp = new SettingsPanel();
        SettingsPanel.testPath.setText(Initialization.testDataPath);
        SettingsPanel.trainPath.setText(Initialization.trainDataPath);
        SettingsPanel.rfClassificationFilePath.setText(Initialization.rfClassificationFilePath);
        int result = JOptionPane.showConfirmDialog(null, sp,
            "Settings", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.OK_OPTION) {
            Initialization.testDataPath = SettingsPanel.testPath.getText();
            Initialization.trainDataPath = SettingsPanel.trainPath.getText();
            Initialization.rfClassificationFilePath = SettingsPanel.rfClassificationFilePath.getText();
            Initialization.update();
        }
    }//GEN-LAST:event_settingsActionPerformed

    private void browseImageRFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseImageRFActionPerformed
        JFileChooser fc=new JFileChooser("D:\\Dataset\\ALL_IDB1\\images");
        fc.setDialogTitle("Select an Image");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "png", "gif","jpg","jpeg");
        fc.setFileFilter(filter);
        fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
        ImagePreviewPanel preview = new ImagePreviewPanel();
        fc.setAccessory(preview);
        fc.addPropertyChangeListener(preview);
        int i = fc.showOpenDialog(this);
        if(i==JFileChooser.APPROVE_OPTION){
            File f=fc.getSelectedFile();
            String filePath=f.getPath();
            try{
                rfImagePath.setText(filePath);
                Initialization.src = ImageIO.read(new File(filePath));
                ImageIcon im = new ImageIcon(Initialization.src.getScaledInstance(imageContainer.getWidth(), imageContainer.getHeight(),Image.SCALE_SMOOTH));
                imageContainer.setIcon(im);
            }
            catch(Exception e)  {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_browseImageRFActionPerformed

    private void newFeatureFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFeatureFileActionPerformed
        ExtractFeaturesPanel ef = new ExtractFeaturesPanel();
        JOptionPane.showOptionDialog(null, ef,
            "Create Feature File", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,null,new Object[]{},null);
    }//GEN-LAST:event_newFeatureFileActionPerformed

    private void exitSystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitSystemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitSystemActionPerformed

    private void trainRFClassifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainRFClassifierActionPerformed
        JPanel rfProgressPanel = new JPanel();
        JDialog mydialog = new JDialog();
        
        JProgressBar rfProgress = new JProgressBar();
        rfProgress.setIndeterminate(true);
        mydialog.add(rfProgress);
                mydialog.setSize(new Dimension(400,100));
                mydialog.setTitle("I got you! You can't click on your JFrame now!");
                mydialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL); // prevent user from doing something else
                
//        rfProgressPanel.add(new JLabel("Generating Trees"));
//        rfProgressPanel.add(rfProgress);
        SwingWorker randomForestGenerator = new SwingWorker<Integer,String>   ()   {
            @Override
            protected Integer doInBackground() {
                publish("started");
                PrepareDataset pd = new PrepareDataset();
                Integer n = (Integer) numAttributes.getValue();
                ArrayList<ArrayList<String>> trainingData = pd.getData(Initialization.trainDataPath);
                if(n == 0)
                    n = (int) Math.round(Math.log(7)/Math.log(2)+1);
                RandomForest rf = new RandomForest((Integer) numTrees.getValue(),4,7,n,2,trainingData);
                rf.writeToFile(); 
                return 100;
            }
            
            @Override
            protected void process(List<String> chunks) {
                mydialog.setVisible(true);
            }
            @Override
            protected void done()   {
                //System.out.println("Done");
                mydialog.setVisible(false);
            }
        }; 
        randomForestGenerator.execute();
    }//GEN-LAST:event_trainRFClassifierActionPerformed

    private void rfOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rfOutputFileActionPerformed

    }//GEN-LAST:event_rfOutputFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Initialization.setup();
                Dashboard db = new Dashboard();
//                db.setLayout(new BorderLayout());
//                JPanel statusPanel = new JPanel();
//                statusPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));
//                db.add(statusPanel, BorderLayout.SOUTH);
//                statusPanel.setPreferredSize(new Dimension(db.getWidth(), 25));
//                statusPanel.setLayout(new BoxLayout(statusPanel, BoxLayout.X_AXIS));
//                JLabel statusLabel = new JLabel("status");
//                statusLabel.setHorizontalAlignment(SwingConstants.LEFT);
//                statusPanel.add(statusLabel);
                ((DefaultTableCellRenderer) cellTable.getTableHeader().getDefaultRenderer())
                .setHorizontalAlignment(SwingConstants.CENTER);
                db.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseImageRF;
    private static javax.swing.JTable cellTable;
    private javax.swing.JMenuItem exitSystem;
    private javax.swing.JLabel imageContainer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuItem newFeatureFile;
    private javax.swing.JSpinner numAttributes;
    private javax.swing.JSpinner numTrees;
    private javax.swing.JMenuItem performAnalysis;
    private javax.swing.JButton performRFClassification;
    private javax.swing.JTextField rfImagePath;
    private javax.swing.JButton rfOutputFile;
    private javax.swing.JMenuItem settings;
    private javax.swing.JButton trainRFClassifier;
    // End of variables declaration//GEN-END:variables
}
